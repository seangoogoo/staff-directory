/**
 * Breakpoints utility for accessing Tailwind breakpoints in JavaScript
 * This script reads the CSS variables generated by the postcss-tailwind-to-css-vars plugin
 */
'use strict';

// Create a Breakpoints utility object
const Breakpoints = {
    // Get a breakpoint value by name
    get: function(name) {
        // Get the numeric value from CSS variable
        const value = getComputedStyle(document.documentElement)
            .getPropertyValue(`--breakpoint-${name}-value`)
            .trim();
        
        // Parse as integer and return
        return parseInt(value, 10);
    },
    
    // Check if the current window width is below a breakpoint
    below: function(name) {
        return window.innerWidth < this.get(name);
    },
    
    // Check if the current window width is above a breakpoint
    above: function(name) {
        return window.innerWidth >= this.get(name);
    },
    
    // Create a media query for a breakpoint
    mediaQuery: function(name, type = 'max') {
        const value = this.get(name);
        return window.matchMedia(`(${type}-width: ${value}px)`);
    },
    
    // Watch for changes at a breakpoint and execute callback
    watch: function(name, callback) {
        const query = this.mediaQuery(name);
        
        // Run once at load
        callback(query);
        
        // Add listener for changes
        query.addEventListener('change', callback);
        
        // Return a function to remove the listener
        return function() {
            query.removeEventListener('change', callback);
        };
    }
};

// Make available globally
window.Breakpoints = Breakpoints;
